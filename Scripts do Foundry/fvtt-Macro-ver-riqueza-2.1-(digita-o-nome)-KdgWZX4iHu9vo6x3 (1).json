{
  "name": "Ver riqueza 2.1 (digita o nome)",
  "type": "script",
  "scope": "global",
  "author": "RNT73MOi4EKOqeYu",
  "img": "icons/commodities/metal/ingot-hammered-gold.webp",
  "command": "let currentDialog = null; // Manter o controle do diálogo atual\n\n// Função para calcular o valor em GP das moedas\nconst calculateCoinValue = (coins) => {\n  return (coins.cp || 0) / 100 + \n         (coins.sp || 0) / 10 + \n         (coins.gp || 0) + \n         (coins.ep || 0) / 2 + \n         (coins.pp || 0) * 10;\n};\n\n// Função para calcular o valor total dos itens (apenas os que têm preço)\nconst calculateItemValue = (items) => {\n  return items.reduce((acc, item) => {\n    let value = item.system?.price?.value || 0;\n    let quantity = item.system?.quantity || 1;\n    let denomination = item.system?.price?.denomination;\n\n    // Filtrar para garantir que apenas itens com preço sejam considerados\n    if (value > 0) {\n      switch (denomination) {\n        case \"cp\":\n          return acc + (value / 100) * quantity;\n        case \"sp\":\n          return acc + (value / 10) * quantity;\n        case \"ep\":\n          return acc + (value / 2) * quantity;\n        case \"gp\":\n          return acc + (value) * quantity;\n        case \"pp\":\n          return acc + (value * 10) * quantity;\n        default:\n          ui.notifications.warn(`Unknown currency type for item: ${item.name}`);\n          return acc;\n      }\n    }\n    return acc;\n  }, 0);\n};\n\n// Função para formatar valores com separadores de milhares\nconst formatValue = (value) => {\n  return value.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n};\n\n// Função para renderizar o diálogo\nconst renderDialog = (actor) => {\n  let coins = actor.system?.currency || {};\n  let items = actor.items.filter(item => item.system?.price?.value); // Filtra itens com preço\n\n  let coinValue = calculateCoinValue(coins);\n  let itemValue = calculateItemValue(items);\n  let totalWealth = coinValue + itemValue;\n\n  let itemRows = items.map(item => {\n    let itemPrice = calculateItemValue([item]); // Calcula o valor individual de cada item\n    return `<tr><td>${item.name}</td><td>${formatValue(itemPrice)} PO</td></tr>`;\n  }).join(\"\");\n\n  let dialogContent = `\n    <div style=\"width: 100%; height: 100%;\">\n      <table style=\"width:100%; line-height:1.5;\">\n        <thead>\n          <tr>\n            <th>Item</th>\n            <th>Valor em PO</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${itemRows}\n          <tr>\n            <td><strong>Total de moedas</strong></td>\n            <td><strong>${formatValue(coinValue)} PO</strong></td>\n          </tr>\n          <tr>\n            <td><strong>Riqueza total</strong></td>\n            <td><strong>${formatValue(totalWealth)} PO</strong></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  `;\n\n  // Se já houver um diálogo aberto, atualiza o conteúdo\n  if (currentDialog) {\n    currentDialog.data.content = dialogContent;\n    currentDialog.render(true);\n  } else {\n    // Cria e renderiza o novo diálogo\n    currentDialog = new Dialog({\n      title: `${actor.name} - Riqueza`,\n      content: dialogContent,\n      buttons: {\n        close: { label: \"Fechar\" }\n      }\n    }).render(true, { resizable: true });\n  }\n};\n\n// Função para abrir uma caixa de diálogo solicitando o nome do personagem\nconst requestCharacterName = () => {\n  new Dialog({\n    title: \"Digite o nome do personagem\",\n    content: `\n      <div>\n        <label>Nome do personagem:</label>\n        <input type=\"text\" id=\"characterNameInput\" style=\"width: 100%;\" />\n      </div>\n    `,\n    buttons: {\n      confirm: {\n        label: \"Confirmar\",\n        callback: (html) => {\n          let characterName = html.find('#characterNameInput').val();\n          let actor = game.actors.getName(characterName);\n\n          if (actor) {\n            renderDialog(actor); // Renderiza o diálogo para o ator com o nome fornecido\n          } else {\n            ui.notifications.error(`Personagem \"${characterName}\" não encontrado.`);\n          }\n        }\n      },\n      cancel: {\n        label: \"Cancelar\"\n      }\n    }\n  }).render(true);\n};\n\n// Chama a função para solicitar o nome do personagem\nrequestCharacterName();",
  "folder": "rEjsvJVi4jZ2t0FD",
  "flags": {
    "scene-packer": {
      "sourceId": "Macro.KdgWZX4iHu9vo6x3"
    },
    "exportSource": {
      "world": "samsara-server",
      "system": "dnd5e",
      "coreVersion": "12.331",
      "systemVersion": "3.3.1"
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "2.4.0",
    "coreVersion": "12.330",
    "createdTime": 1696749531044,
    "modifiedTime": 1726594146371,
    "lastModifiedBy": "RNT73MOi4EKOqeYu"
  }
}