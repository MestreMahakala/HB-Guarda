{
  "name": "Análise de Riqueza 3.0",
  "type": "script",
  "command": "let currentDialog = null; // Manter o controle do diálogo atual\n\n// Mapeamento de cores por raridade\nconst rarityColors = {\n  \"common\": \"#000000\",   // Preto\n  \"uncommon\": \"#5da15dff\",  // Verde\n  \"rare\": \"#0000ff\",  // Azul\n  \"very rare\": \"#800080\",  // Roxo\n  \"legendary\": \"#ffa500\",  // Laranja\n  \"artifact\": \"#d2691e\"   // Marrom\n};\n\n// Função para obter a cor com base na raridade do item\nconst getItemRarityColor = (rarity) => {\n  return rarityColors[rarity.toLowerCase()] || \"#ffffff\"; // Branco se não encontrar\n};\n\n// Função para calcular o valor em GP das moedas\nconst calculateCoinValue = (coins) => {\n  return (coins.cp || 0) / 100 + \n         (coins.sp || 0) / 10 + \n         (coins.gp || 0) + \n         (coins.ep || 0) / 2 + \n         (coins.pp || 0) * 10;\n};\n\n// Função para calcular o valor total dos itens (apenas os que têm preço)\nconst calculateItemValue = (items) => {\n  return items.reduce((acc, item) => {\n    let value = item.system?.price?.value || 0;\n    let quantity = item.system?.quantity || 1;\n    let denomination = item.system?.price?.denomination;\n\n    // Filtrar para garantir que apenas itens com preço sejam considerados\n    if (value > 0) {\n      switch (denomination) {\n        case \"cp\":\n          return acc + (value / 100) * quantity;\n        case \"sp\":\n          return acc + (value / 10) * quantity;\n        case \"ep\":\n          return acc + (value / 2) * quantity;\n        case \"gp\":\n          return acc + (value) * quantity;\n        case \"pp\":\n          return acc + (value * 10) * quantity;\n        default:\n          ui.notifications.warn(`Unknown currency type for item: ${item.name}`);\n          return acc;\n      }\n    }\n    return acc;\n  }, 0);\n};\n\n// Função para formatar valores com separadores de milhares\nconst formatValue = (value) => {\n  return value.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n};\n\n// Função para determinar o nível com base na XP\nconst calculateLevel = (xp) => {\n  if (xp >= 149 && xp <= 162) return 19;\n  if (xp >= 135 && xp <= 148) return 18;\n  if (xp >= 122 && xp <= 134) return 17;\n  if (xp >= 109 && xp <= 121) return 16;\n  if (xp >= 97 && xp <= 108) return 15;\n  if (xp >= 85 && xp <= 96) return 14;\n  if (xp >= 74 && xp <= 84) return 13;\n  if (xp >= 63 && xp <= 73) return 12;\n  if (xp >= 53 && xp <= 62) return 11;\n  if (xp >= 43 && xp <= 52) return 10;\n  if (xp >= 34 && xp <= 42) return 9;\n  if (xp >= 26 && xp <= 33) return 8;\n  if (xp >= 19 && xp <= 25) return 7;\n  if (xp >= 13 && xp <= 18) return 6;\n  if (xp >= 8 && xp <= 12) return 5;\n  if (xp >= 4 && xp <= 7) return 4;\n  if (xp >= 1 && xp <= 3) return 3;\n  return 1; // Nível mínimo padrão\n};\n\n// Função para determinar o rank com base no nível\nconst calculateRank = (level) => {\n  if (level >= 20) return \"S+\";\n  if (level >= 17 && level <= 19) return \"S\";\n  if (level >= 13 && level <= 16) return \"A\";\n  if (level >= 9 && level <= 12) return \"B\";\n  if (level >= 5 && level <= 8) return \"C\";\n  return \"D\";\n};\n\n// Lista de riquezas correspondentes a cada progressão de XP\nconst wealthByProgression = [\n  150, 350, 550, 750, 950, 1150, 1350, 1550, 1950, 2350, 2750, 3150, 3550, 3950, 4350, 4750, 5150, 5550, 5950, 6350, 6750,\n  7150, 7550, 7950, 8350, 8750, 9150, 9550, 9950, 10350, 10750, 11150, 11950, 12750, 13550, 14350, 15150, 15950, 16750, \n  17550, 18350, 19150, 19950, 20750, 21550, 22350, 23150, 23950, 24750, 25550, 26350, 27150, 27950, 28750, 29550, 30350,\n  31150, 31950, 32750, 33550, 34350, 35150, 35950, 36750, 37550, 38350, 39150, 39950, 40750, 41550, 42350, 43150, 43950,\n  44750, 45550, 46350, 47150, 47950, 48750, 49550, 50350, 51150, 51950, 52750, 53550, 54350, 55150, 55950, 56750, 57550,\n  58350, 59150, 59950, 60750, 61550, 62350, 63150, 63950, 64750, 65550, 66350, 67150, 67950, 68750, 69550, 70350, 71150,\n  71950, 72750, 73550, 74350, 75150, 75950, 76750, 77550, 78350, 79150, 79950, 80750, 81550, 82350, 83150, 83950, 84750,\n  85550, 86350, 87150, 87950, 88750, 89550, 90350, 91150, 91950, 92750, 93550, 94350, 95150, 95950, 96750, 97550, 98350,\n  99150, 99950, 100750, 101550, 102350, 103150, 103950, 104750, 105550, 106350, 107150, 107950, 108750, 109550, 110350,\n  111150, 111950, 112750, 113550, 114350, 115150, 115950, 116750, 117550, 118350, 119150, 119950, 120750, 121550, 122350,\n  123150, 123950, 124750, 125550, 126350, 127150, 127950, 128750, 129550, 130350, 131150, 131950, 132750, 133550, 134350,\n  135150, 135950, 136750, 137550, 138350, 139150, 139950, 140750, 141550, 142350, 143150, 143950, 144750, 145550, 146350,\n  147150, 147950, 148750, 149550, 150350, 151150, 151950, 152750, 153550, 154350, 155150, 155950, 156750, 157550, 158350\n];\n\n// Função para calcular a riqueza estimada com base no Rank D e nas progressões\nconst calculateEstimatedWealthWithProgressions = (progression, isCreatedAfterRankD, startingProgression) => {\n  let initialWealth = 0;\n\n  // Se o personagem foi criado após o Rank D, calcular com 90% da riqueza inicial\n  if (isCreatedAfterRankD && startingProgression > 0) {\n    initialWealth = wealthByProgression[startingProgression - 1] * 0.9; // 90% da riqueza inicial\n  } else {\n    initialWealth = wealthByProgression[startingProgression - 1] || 0; // Riqueza full\n  }\n\n  // Agora, somar a riqueza das progressões subsequentes até a progressão atual\n  let subsequentWealth = 0;\n  for (let i = startingProgression; i < progression; i++) {\n    if (i >= 1 && i <= 7) {\n      subsequentWealth += 200;\n    } else if (i >= 8 && i <= 33) {\n      subsequentWealth += 400;\n    } else if (i >= 34 && i <= 73) {\n      subsequentWealth += 800;\n    } else if (i >= 74 && i <= 121) {\n      subsequentWealth += 1200;\n    } else if (i >= 122) {\n      subsequentWealth += 2000;\n    }\n  }\n\n  return initialWealth + subsequentWealth;\n};\n\n// Função para renderizar o diálogo\nconst renderDialog = (actor) => {\n  let coins = actor.system?.currency || {};\n  let items = actor.items.filter(item => item.system?.price?.value); // Filtra itens com preço\n  let xp = actor.system.details.xp.value || 0; // Obtém o valor de XP da ficha do personagem\n\n  let coinValue = calculateCoinValue(coins);\n  let itemValue = calculateItemValue(items);\n  let totalWealth = coinValue + itemValue;\n\n  let itemRows = items.map(item => {\n    let itemPrice = calculateItemValue([item]); // Calcula o valor individual de cada item\n    let itemRarity = item.system?.rarity || \"common\"; // Obtém a raridade do item\n    let rarityColor = getItemRarityColor(itemRarity); // Obtém a cor baseada na raridade\n\n    return `<tr style=\"color: ${rarityColor};\">\n              <td>${item.name}</td>\n              <td>${formatValue(itemPrice)} PO</td>\n            </tr>`;\n  }).join(\"\");\n\n  // Calcular nível, rank e riqueza estimada\n  let level = calculateLevel(xp);\n  let rank = calculateRank(level);\n  let estimatedWealth = calculateEstimatedWealthWithProgressions(xp, false, 1);\n\n  // Montar a legenda de raridades\n  let rarityLegend = Object.keys(rarityColors).map(rarity => {\n    return `<tr>\n              <td style=\"color: ${rarityColors[rarity]};\"><strong>${rarity}</strong></td>\n              <td style=\"background-color: ${rarityColors[rarity]}; width: 50px;\"></td>\n            </tr>`;\n  }).join(\"\");\n\n  let dialogContent = `\n    <div style=\"display: flex; justify-content: space-between; align-items: flex-start; height: 100%;\">\n      <div style=\"width: 60%;\">\n        <table style=\"width:100%; line-height:1.5;\">\n          <thead>\n            <tr>\n              <th>Item</th>\n              <th>Valor em PO</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${itemRows}\n            <tr>\n              <td><strong>Total de moedas</strong></td>\n              <td><strong>${formatValue(coinValue)} PO</strong></td>\n            </tr>\n            <tr>\n              <td><strong>Riqueza total</strong></td>\n              <td><strong>${formatValue(totalWealth)} PO</strong></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div style=\"width: 35%; display: flex; flex-direction: column; justify-content: flex-end;\">\n        <div>\n          <h3>Análise do Personagem</h3>\n          <p><strong>Nome:</strong> ${actor.name}</p>\n          <p><strong>Progressões:</strong> ${xp}</p>\n          <p><strong>Nível:</strong> ${level}</p>\n          <p><strong>Rank:</strong> ${rank}</p>\n          <p><label><input type=\"checkbox\" id=\"createdAfterRankD\"> Criado após o Rank D?</label></p>\n          <p>Com quantas progressões o personagem começou? <input type=\"number\" id=\"startingProgression\" min=\"1\" max=\"${xp}\" value=\"${xp}\"></p>\n          <p><button id=\"calculateWealth\">Calcular Riqueza Estimada</button></p>\n        </div>\n        <div id=\"wealthResult\"><p><strong>Riqueza Estimada:</strong> ${formatValue(estimatedWealth)} PO</p></div>\n        <h3>Legenda de Raridade</h3>\n        <table style=\"width:100%; line-height:1.5;\">\n          <tbody>\n            ${rarityLegend}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  `;\n\n  // Se já houver um diálogo aberto, atualiza o conteúdo\n  if (currentDialog) {\n    currentDialog.data.content = dialogContent;\n    currentDialog.render(true);\n  } else {\n    // Cria e renderiza o novo diálogo\n    currentDialog = new Dialog({\n      title: `${actor.name} - Riqueza`,\n      content: dialogContent,\n      buttons: {\n        close: { label: \"Fechar\" }\n      },\n      render: (html) => {\n        // Adiciona o evento para calcular a riqueza quando o botão for clicado\n        html.find('#calculateWealth').click(() => {\n          let isCreatedAfterRankD = html.find('#createdAfterRankD').is(':checked');\n          let startingProgression = parseInt(html.find('#startingProgression').val());\n          let estimatedWealth = calculateEstimatedWealthWithProgressions(xp, isCreatedAfterRankD, startingProgression);\n          html.find('#wealthResult').html(`<p><strong>Riqueza Estimada:</strong> ${formatValue(estimatedWealth)} PO</p>`);\n        });\n      }\n    }).render(true, { resizable: true });\n  }\n};\n\n// Função para abrir uma caixa de diálogo solicitando o nome do personagem\nconst requestCharacterName = () => {\n  new Dialog({\n    title: \"Digite o nome do personagem\",\n    content: `\n      <div>\n        <label>Nome do personagem:</label>\n        <input type=\"text\" id=\"characterNameInput\" style=\"width: 100%;\" />\n      </div>\n    `,\n    buttons: {\n      confirm: {\n        label: \"Confirmar\",\n        callback: (html) => {\n          let characterName = html.find('#characterNameInput').val();\n          let actor = game.actors.getName(characterName);\n\n          if (actor) {\n            renderDialog(actor); // Renderiza o diálogo para o ator com o nome fornecido\n          } else {\n            ui.notifications.error(`Personagem \"${characterName}\" não encontrado.`);\n          }\n        }\n      },\n      cancel: {\n        label: \"Cancelar\"\n      }\n    }\n  }).render(true);\n};\n\n// Chama a função para solicitar o nome do personagem\nrequestCharacterName();",
  "img": "icons/commodities/metal/ingot-stamped-spiral.webp",
  "author": "RNT73MOi4EKOqeYu",
  "scope": "global",
  "folder": "rEjsvJVi4jZ2t0FD",
  "flags": {
    "scene-packer": {
      "hash": "f3861b4dd8f6c79a77bda6a9202cea1a33291d9e",
      "sourceId": "Macro.f1JNkdwR9HuCaBAx"
    },
    "exportSource": {
      "world": "samsara-server",
      "system": "dnd5e",
      "coreVersion": "12.331",
      "systemVersion": "3.3.1"
    }
  },
  "_stats": {
    "coreVersion": "12.330",
    "systemId": "dnd5e",
    "systemVersion": "3.3.1",
    "createdTime": 1726934824816,
    "modifiedTime": 1726943551565,
    "lastModifiedBy": "RNT73MOi4EKOqeYu"
  }
}