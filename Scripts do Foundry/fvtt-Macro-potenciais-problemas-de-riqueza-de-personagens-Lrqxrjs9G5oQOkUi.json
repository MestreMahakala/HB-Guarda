{
  "name": "Potenciais problemas de Riqueza de Personagens",
  "type": "script",
  "command": "const wealthByProgression = [\n  150, 350, 550, 750, 950, 1150, 1350, 1550, 1950, 2350, 2750, 3150, 3550, 3950, 4350, 4750, 5150, 5550, 5950, 6350, 6750,\n  7150, 7550, 7950, 8350, 8750, 9150, 9550, 9950, 10350, 10750, 11150, 11950, 12750, 13550, 14350, 15150, 15950, 16750,\n  17550, 18350, 19150, 19950, 20750, 21550, 22350, 23150, 23950, 24750, 25550, 26350, 27150, 27950, 28750, 29550, 30350,\n  31150, 31950, 32750, 33550, 34350, 35150, 35950, 36750, 37550, 38350, 39150, 39950, 40750, 41550, 42350, 43150, 43950,\n  44750, 45550, 46350, 47150, 47950, 48750, 49550, 50350, 51150, 51950, 52750, 53550, 54350, 55150, 55950, 56750, 57550,\n  58350, 59150, 59950, 60750, 61550, 62350, 63150, 63950, 64750, 65550, 66350, 67150, 67950, 68750, 69550, 70350, 71150,\n  71950, 72750, 73550, 74350, 75150, 75950, 76750, 77550, 78350, 79150, 79950, 80750, 81550, 82350, 83150, 83950, 84750,\n  85550, 86350, 87150, 87950, 88750, 89550, 90350, 91150, 91950, 92750, 93550, 94350, 95150, 95950, 96750, 97550, 98350,\n  99150, 99950, 100750, 101550, 102350, 103150, 103950, 104750, 105550, 106350, 107150, 107950, 108750, 109550, 110350,\n  111150, 111950, 112750, 113550, 114350, 115150, 115950, 116750, 117550, 118350, 119150, 119950, 120750, 121550, 122350,\n  123150, 123950, 124750, 125550, 126350, 127150, 127950, 128750, 129550, 130350, 131150, 131950, 132750, 133550, 134350,\n  135150, 135950, 136750, 137550, 138350, 139150, 139950, 140750, 141550, 142350, 143150, 143950, 144750, 145550, 146350,\n  147150, 147950, 148750, 149550, 150350, 151150, 151950, 152750, 153550, 154350, 155150, 155950, 156750, 157550, 158350\n];\n\n// Funções auxiliares para cálculo de riqueza total e estimada\n\nconst calculateItemValue = (items) => {\n  return items.reduce((acc, item) => {\n    let value = item.system?.price?.value || 0;\n    let quantity = item.system?.quantity || 1;\n    let denomination = item.system?.price?.denomination;\n\n    if (value > 0) {\n      switch (denomination) {\n        case \"cp\":\n          return acc + (value / 100) * quantity;\n        case \"sp\":\n          return acc + (value / 10) * quantity;\n        case \"ep\":\n          return acc + (value / 2) * quantity;\n        case \"gp\":\n          return acc + value * quantity;\n        case \"pp\":\n          return acc + (value * 10) * quantity;\n        default:\n          return acc;\n      }\n    }\n    return acc;\n  }, 0);\n};\n\nconst calculateEstimatedWealthWithProgressions = (progression) => {\n  if (progression <= 0 || progression > wealthByProgression.length) return 0;\n  return wealthByProgression[progression - 1];\n};\n\nconst calculateCoinValue = (coins) => {\n  return (coins.cp || 0) / 100 +\n         (coins.sp || 0) / 10 +\n         (coins.gp || 0) +\n         (coins.ep || 0) / 2 +\n         (coins.pp || 0) * 10;\n};\n\n// Função principal para calcular os dados dos atores e exibir os resultados\n\nconst analyzeActorsWealth = () => {\n  const data = [];\n\n  for (const actor of game.actors) {\n    const coins = actor.system?.currency || {};\n    const items = actor.items || [];\n    const progression = actor.system?.details?.xp?.value || 0;\n\n    const totalCoinValue = calculateCoinValue(coins);\n    const totalItemValue = calculateItemValue(items);\n    const totalWealth = totalCoinValue + totalItemValue;\n    const estimatedWealth = calculateEstimatedWealthWithProgressions(progression);\n    const wealthDifference = estimatedWealth - totalWealth;\n\n    const itemsWithoutPrice = items\n      .filter(item => item.system?.price?.value === 0)\n      .map(item => item.name)\n      .join(\", \");\n\n    if (itemsWithoutPrice || Math.abs(wealthDifference) > 0) {\n      data.push({\n        actorName: actor.name,\n        progression: progression,\n        totalWealth: totalWealth.toFixed(2),\n        estimatedWealth: estimatedWealth.toFixed(2),\n        wealthDifference: wealthDifference.toFixed(2),\n        itemsWithoutPrice: itemsWithoutPrice || \"Nenhum\",\n        wealthDiscrepancy: totalWealth !== estimatedWealth\n      });\n    }\n  }\n\n  renderWealthAnalysis(data);\n};\n\n// Função para renderizar a análise de riqueza\n\nconst renderWealthAnalysis = (data) => {\n  const rows = data.map(entry => `\n    <tr>\n      <td style=\"border-right: 2px solid #333;\">${entry.actorName}</td>\n      <td style=\"border-right: 2px solid #333;\">${entry.progression}</td>\n      <td style=\"color: ${entry.wealthDiscrepancy ? 'red' : 'inherit'}; border-right: 2px solid #333;\">${entry.totalWealth} PO</td>\n      <td style=\"border-right: 2px solid #333;\">${entry.estimatedWealth} PO</td>\n      <td style=\"border-right: 2px solid #333;\">${entry.wealthDifference} PO</td>\n      <td>${entry.itemsWithoutPrice}</td>\n    </tr>\n  `).join(\"\");\n\n  const content = `\n    <h3>Análise de Riqueza dos Personagens</h3>\n    <table style=\"width: 100%; text-align: left; border-collapse: collapse;\">\n      <thead>\n        <tr>\n          <th style=\"border-bottom: 2px solid #333; border-right: 2px solid #333;\">Personagem</th>\n          <th style=\"border-bottom: 2px solid #333; border-right: 2px solid #333;\">Progressão</th>\n          <th style=\"border-bottom: 2px solid #333; border-right: 2px solid #333;\">Riqueza Total</th>\n          <th style=\"border-bottom: 2px solid #333; border-right: 2px solid #333;\">Riqueza Estimada</th>\n          <th style=\"border-bottom: 2px solid #333; border-right: 2px solid #333;\">Diferença</th>\n          <th style=\"border-bottom: 2px solid #333;\">Itens com Preço 0</th>\n        </tr>\n      </thead>\n      <tbody>\n        ${rows || '<tr><td colspan=\"6\">Nenhum dado encontrado.</td></tr>'}\n      </tbody>\n    </table>\n  `;\n\n  new Dialog({\n    title: \"Análise de Riqueza\",\n    content: content,\n    buttons: {\n      close: {\n        label: \"Fechar\"\n      }\n    }\n  }).render(true, { resizable: true });\n};\n\n// Executa a análise\n\nanalyzeActorsWealth();",
  "img": "icons/commodities/treasure/crown-gold-satin-gems-red.webp",
  "author": "RNT73MOi4EKOqeYu",
  "scope": "global",
  "folder": "rEjsvJVi4jZ2t0FD",
  "flags": {
    "scene-packer": {
      "hash": "ea9c1808892b8a6ac80292691ef9aa60bef981a3",
      "sourceId": "Macro.Lrqxrjs9G5oQOkUi"
    },
    "exportSource": {
      "world": "samsara-server",
      "system": "dnd5e",
      "coreVersion": "12.331",
      "systemVersion": "3.3.1"
    }
  },
  "_stats": {
    "coreVersion": "12.331",
    "systemId": "dnd5e",
    "systemVersion": "3.3.1",
    "createdTime": 1733769912776,
    "modifiedTime": 1733771388235,
    "lastModifiedBy": "RNT73MOi4EKOqeYu"
  }
}